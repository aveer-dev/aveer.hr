drop policy "Enable all for authenticated users only" on "public"."org_settings";
create table "public"."calendars" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "platform" text not null,
    "calendar_id" text not null,
    "org" text not null,
    "entity" bigint
);
alter table "public"."calendars" enable row level security;
create table "public"."platform_thirdparty_keys" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "token" text not null,
    "refresh_token" text not null,
    "platform" third_party_auth_platforms not null,
    "platform_id" text
);
alter table "public"."platform_thirdparty_keys" enable row level security;
alter table "public"."org_settings" add column "calendar_employee_events" text[];
alter table "public"."org_settings" add column "enable_calendar" boolean not null default false;
CREATE UNIQUE INDEX calendars_entity_key ON public.calendars USING btree (entity);
CREATE UNIQUE INDEX calendars_org_key ON public.calendars USING btree (org);
CREATE UNIQUE INDEX calendars_pkey ON public.calendars USING btree (id);
CREATE UNIQUE INDEX platform_thirdparty_keys_pkey ON public.platform_thirdparty_keys USING btree (id);
alter table "public"."calendars" add constraint "calendars_pkey" PRIMARY KEY using index "calendars_pkey";
alter table "public"."platform_thirdparty_keys" add constraint "platform_thirdparty_keys_pkey" PRIMARY KEY using index "platform_thirdparty_keys_pkey";
alter table "public"."calendars" add constraint "calendars_entity_fkey" FOREIGN KEY (entity) REFERENCES legal_entities(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;
alter table "public"."calendars" validate constraint "calendars_entity_fkey";
alter table "public"."calendars" add constraint "calendars_entity_key" UNIQUE using index "calendars_entity_key";
alter table "public"."calendars" add constraint "calendars_org_fkey" FOREIGN KEY (org) REFERENCES organisations(subdomain) ON UPDATE CASCADE ON DELETE CASCADE not valid;
alter table "public"."calendars" validate constraint "calendars_org_fkey";
alter table "public"."calendars" add constraint "calendars_org_key" UNIQUE using index "calendars_org_key";
grant delete on table "public"."calendars" to "anon";
grant insert on table "public"."calendars" to "anon";
grant references on table "public"."calendars" to "anon";
grant select on table "public"."calendars" to "anon";
grant trigger on table "public"."calendars" to "anon";
grant truncate on table "public"."calendars" to "anon";
grant update on table "public"."calendars" to "anon";
grant delete on table "public"."calendars" to "authenticated";
grant insert on table "public"."calendars" to "authenticated";
grant references on table "public"."calendars" to "authenticated";
grant select on table "public"."calendars" to "authenticated";
grant trigger on table "public"."calendars" to "authenticated";
grant truncate on table "public"."calendars" to "authenticated";
grant update on table "public"."calendars" to "authenticated";
grant delete on table "public"."calendars" to "service_role";
grant insert on table "public"."calendars" to "service_role";
grant references on table "public"."calendars" to "service_role";
grant select on table "public"."calendars" to "service_role";
grant trigger on table "public"."calendars" to "service_role";
grant truncate on table "public"."calendars" to "service_role";
grant update on table "public"."calendars" to "service_role";
grant delete on table "public"."platform_thirdparty_keys" to "anon";
grant insert on table "public"."platform_thirdparty_keys" to "anon";
grant references on table "public"."platform_thirdparty_keys" to "anon";
grant select on table "public"."platform_thirdparty_keys" to "anon";
grant trigger on table "public"."platform_thirdparty_keys" to "anon";
grant truncate on table "public"."platform_thirdparty_keys" to "anon";
grant update on table "public"."platform_thirdparty_keys" to "anon";
grant delete on table "public"."platform_thirdparty_keys" to "authenticated";
grant insert on table "public"."platform_thirdparty_keys" to "authenticated";
grant references on table "public"."platform_thirdparty_keys" to "authenticated";
grant select on table "public"."platform_thirdparty_keys" to "authenticated";
grant trigger on table "public"."platform_thirdparty_keys" to "authenticated";
grant truncate on table "public"."platform_thirdparty_keys" to "authenticated";
grant update on table "public"."platform_thirdparty_keys" to "authenticated";
grant delete on table "public"."platform_thirdparty_keys" to "service_role";
grant insert on table "public"."platform_thirdparty_keys" to "service_role";
grant references on table "public"."platform_thirdparty_keys" to "service_role";
grant select on table "public"."platform_thirdparty_keys" to "service_role";
grant trigger on table "public"."platform_thirdparty_keys" to "service_role";
grant truncate on table "public"."platform_thirdparty_keys" to "service_role";
grant update on table "public"."platform_thirdparty_keys" to "service_role";
create policy "Only admins can perform actions on org calendar"
on "public"."calendars"
as permissive
for all
to authenticated
using (( SELECT authorize_role(calendars.org) AS authorize_role));
create policy "Enable read for all users"
on "public"."platform_thirdparty_keys"
as permissive
for select
to authenticated
using (true);
create policy "Enable all for authenticated users only"
on "public"."org_settings"
as permissive
for all
to authenticated
using (true)
with check (( SELECT authorize_role(org_settings.org) AS authorize_role));
