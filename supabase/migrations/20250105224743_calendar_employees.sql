create table "public"."contract_calendar_config" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "platform" third_party_auth_platforms not null,
    "platform_id" text not null,
    "profile" uuid default auth.uid(),
    "contract" bigint,
    "org" text not null,
    "calendar_id" text not null
);
alter table "public"."contract_calendar_config" enable row level security;
CREATE UNIQUE INDEX contract_calendar_config_pkey ON public.contract_calendar_config USING btree (id);
alter table "public"."contract_calendar_config" add constraint "contract_calendar_config_pkey" PRIMARY KEY using index "contract_calendar_config_pkey";
alter table "public"."contract_calendar_config" add constraint "contract_calendar_config_contract_fkey" FOREIGN KEY (contract) REFERENCES contracts(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;
alter table "public"."contract_calendar_config" validate constraint "contract_calendar_config_contract_fkey";
alter table "public"."contract_calendar_config" add constraint "contract_calendar_config_org_fkey" FOREIGN KEY (org) REFERENCES organisations(subdomain) ON UPDATE CASCADE ON DELETE CASCADE not valid;
alter table "public"."contract_calendar_config" validate constraint "contract_calendar_config_org_fkey";
alter table "public"."contract_calendar_config" add constraint "contract_calendar_config_profile_fkey" FOREIGN KEY (profile) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;
alter table "public"."contract_calendar_config" validate constraint "contract_calendar_config_profile_fkey";
set check_function_bodies = off;
CREATE OR REPLACE FUNCTION public.check_contract_exists(p_profile_id uuid, p_contract_id bigint)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
DECLARE
    exists boolean;
BEGIN
    SELECT EXISTS (
        SELECT 1
        FROM public.contracts
        WHERE profile = p_profile_id AND id = p_contract_id
    ) INTO exists;

    RETURN exists;
END;
$function$;
grant delete on table "public"."contract_calendar_config" to "anon";
grant insert on table "public"."contract_calendar_config" to "anon";
grant references on table "public"."contract_calendar_config" to "anon";
grant select on table "public"."contract_calendar_config" to "anon";
grant trigger on table "public"."contract_calendar_config" to "anon";
grant truncate on table "public"."contract_calendar_config" to "anon";
grant update on table "public"."contract_calendar_config" to "anon";
grant delete on table "public"."contract_calendar_config" to "authenticated";
grant insert on table "public"."contract_calendar_config" to "authenticated";
grant references on table "public"."contract_calendar_config" to "authenticated";
grant select on table "public"."contract_calendar_config" to "authenticated";
grant trigger on table "public"."contract_calendar_config" to "authenticated";
grant truncate on table "public"."contract_calendar_config" to "authenticated";
grant update on table "public"."contract_calendar_config" to "authenticated";
grant delete on table "public"."contract_calendar_config" to "service_role";
grant insert on table "public"."contract_calendar_config" to "service_role";
grant references on table "public"."contract_calendar_config" to "service_role";
grant select on table "public"."contract_calendar_config" to "service_role";
grant trigger on table "public"."contract_calendar_config" to "service_role";
grant truncate on table "public"."contract_calendar_config" to "service_role";
grant update on table "public"."contract_calendar_config" to "service_role";
create policy "Check user owns contract"
on "public"."contract_calendar_config"
as permissive
for all
to authenticated
using (true)
with check (( SELECT check_contract_exists(auth.uid(), contract_calendar_config.contract) AS check_contract_exists));
