create type "public"."calendar_access_type" as enum ('freeBusyReader', 'reader', 'writer', 'owner');

create type "public"."event_status" as enum ('cancelled', 'confirmed', 'tentative');

create type "public"."event_type" as enum ('birthday', 'default', 'focusTime', 'fromGmail', 'outOfOffice', 'workingLocation');

create type "public"."event_visibility" as enum ('default', 'public', 'private', 'confidential');

drop policy "Only admins can manipulate events" on "public"."calendar_events";

drop policy "Users can only view org events" on "public"."calendar_events";

drop policy "Only admins can perform actions on org calendar" on "public"."calendars";

alter table "public"."calendars" drop constraint "calendars_org_key";

alter table "public"."chat_messages" drop constraint "chat_messages_role_check";

alter table "public"."message_feedback" drop constraint "message_feedback_feedback_type_check";

drop index if exists "public"."calendars_org_key";

create table "public"."google_calendar_webhooks" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone default now(),
    "calendar_id" text not null,
    "org" text,
    "profile" uuid,
    "channel_id" text not null,
    "channel_token" text,
    "resource_id" text not null,
    "resource_uri" text not null,
    "expiration" timestamp with time zone,
    "status" text not null default 'active'::text,
    "last_notification" timestamp with time zone,
    "notification_count" bigint not null default 0
);


alter table "public"."google_calendar_webhooks" enable row level security;

create table "public"."webhook_processing_log" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "channel_id" text not null,
    "webhook_id" bigint,
    "resource_id" text,
    "resource_state" text,
    "event_id" text,
    "event_type" text,
    "calendar_id" text,
    "operation" text,
    "status" text not null,
    "error_message" text,
    "error_details" jsonb,
    "processed_at" timestamp with time zone,
    "processing_time_ms" integer,
    "events_processed" integer default 0,
    "events_created" integer default 0,
    "events_updated" integer default 0,
    "events_deleted" integer default 0
);


alter table "public"."webhook_processing_log" enable row level security;

alter table "public"."calendar_events" add column "birthday_properties" jsonb;

alter table "public"."calendar_events" add column "conference_data" jsonb;

alter table "public"."calendar_events" add column "creator" jsonb;

alter table "public"."calendar_events" add column "etag" text;

alter table "public"."calendar_events" add column "event_type" event_type default 'default'::event_type;

alter table "public"."calendar_events" add column "extended_properties" jsonb;

alter table "public"."calendar_events" add column "iCalUID" text;

alter table "public"."calendar_events" add column "kind" text;

alter table "public"."calendar_events" add column "locked" boolean;

alter table "public"."calendar_events" add column "organizer" jsonb;

alter table "public"."calendar_events" add column "profile" uuid;

alter table "public"."calendar_events" add column "recurring_eventId" text;

alter table "public"."calendar_events" add column "source" jsonb;

alter table "public"."calendar_events" add column "status" event_status;

alter table "public"."calendar_events" add column "visibility" event_visibility default 'default'::event_visibility;

alter table "public"."calendar_events" alter column "event_id" set default ''::text;

alter table "public"."calendar_events" alter column "org" drop not null;

alter table "public"."calendars" add column "access_role" calendar_access_type;

alter table "public"."calendars" add column "background_color" text;

alter table "public"."calendars" add column "color_id" text;

alter table "public"."calendars" add column "conference_properties" jsonb;

alter table "public"."calendars" add column "default_reminders" jsonb[];

alter table "public"."calendars" add column "description" text;

alter table "public"."calendars" add column "etag" text;

alter table "public"."calendars" add column "foreground_color" text;

alter table "public"."calendars" add column "hidden" boolean;

alter table "public"."calendars" add column "primary" boolean;

alter table "public"."calendars" add column "summary" text;

alter table "public"."calendars" add column "time_zone" text;

alter table "public"."calendars" alter column "org" drop not null;

CREATE UNIQUE INDEX calendar_events_event_id_key ON public.calendar_events USING btree (event_id);

CREATE INDEX google_calendar_webhooks_calendar_id_idx ON public.google_calendar_webhooks USING btree (calendar_id);

CREATE INDEX google_calendar_webhooks_channel_id_idx ON public.google_calendar_webhooks USING btree (channel_id);

CREATE UNIQUE INDEX google_calendar_webhooks_channel_id_key ON public.google_calendar_webhooks USING btree (channel_id);

CREATE INDEX google_calendar_webhooks_expiration_idx ON public.google_calendar_webhooks USING btree (expiration);

CREATE INDEX google_calendar_webhooks_org_idx ON public.google_calendar_webhooks USING btree (org);

CREATE UNIQUE INDEX google_calendar_webhooks_pkey ON public.google_calendar_webhooks USING btree (id);

CREATE INDEX google_calendar_webhooks_profile_idx ON public.google_calendar_webhooks USING btree (profile);

CREATE INDEX google_calendar_webhooks_status_idx ON public.google_calendar_webhooks USING btree (status);

CREATE INDEX webhook_processing_log_channel_id_idx ON public.webhook_processing_log USING btree (channel_id);

CREATE INDEX webhook_processing_log_created_at_idx ON public.webhook_processing_log USING btree (created_at);

CREATE INDEX webhook_processing_log_operation_idx ON public.webhook_processing_log USING btree (operation);

CREATE UNIQUE INDEX webhook_processing_log_pkey ON public.webhook_processing_log USING btree (id);

CREATE INDEX webhook_processing_log_status_idx ON public.webhook_processing_log USING btree (status);

CREATE INDEX webhook_processing_log_webhook_id_idx ON public.webhook_processing_log USING btree (webhook_id);

alter table "public"."google_calendar_webhooks" add constraint "google_calendar_webhooks_pkey" PRIMARY KEY using index "google_calendar_webhooks_pkey";

alter table "public"."webhook_processing_log" add constraint "webhook_processing_log_pkey" PRIMARY KEY using index "webhook_processing_log_pkey";

alter table "public"."calendar_events" add constraint "calendar_events_event_id_key" UNIQUE using index "calendar_events_event_id_key";

alter table "public"."calendar_events" add constraint "calendar_events_profile_fkey" FOREIGN KEY (profile) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."calendar_events" validate constraint "calendar_events_profile_fkey";

alter table "public"."google_calendar_webhooks" add constraint "google_calendar_webhooks_channel_id_key" UNIQUE using index "google_calendar_webhooks_channel_id_key";

alter table "public"."google_calendar_webhooks" add constraint "google_calendar_webhooks_org_fkey" FOREIGN KEY (org) REFERENCES organisations(subdomain) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."google_calendar_webhooks" validate constraint "google_calendar_webhooks_org_fkey";

alter table "public"."google_calendar_webhooks" add constraint "google_calendar_webhooks_org_or_profile_check" CHECK ((((org IS NOT NULL) AND (profile IS NULL)) OR ((org IS NULL) AND (profile IS NOT NULL)))) not valid;

alter table "public"."google_calendar_webhooks" validate constraint "google_calendar_webhooks_org_or_profile_check";

alter table "public"."google_calendar_webhooks" add constraint "google_calendar_webhooks_profile_fkey" FOREIGN KEY (profile) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."google_calendar_webhooks" validate constraint "google_calendar_webhooks_profile_fkey";

alter table "public"."google_calendar_webhooks" add constraint "google_calendar_webhooks_status_check" CHECK ((status = ANY (ARRAY['active'::text, 'expired'::text, 'cancelled'::text]))) not valid;

alter table "public"."google_calendar_webhooks" validate constraint "google_calendar_webhooks_status_check";

alter table "public"."webhook_processing_log" add constraint "webhook_processing_log_status_check" CHECK ((status = ANY (ARRAY['success'::text, 'error'::text, 'skipped'::text]))) not valid;

alter table "public"."webhook_processing_log" validate constraint "webhook_processing_log_status_check";

alter table "public"."webhook_processing_log" add constraint "webhook_processing_log_webhook_id_fkey" FOREIGN KEY (webhook_id) REFERENCES google_calendar_webhooks(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."webhook_processing_log" validate constraint "webhook_processing_log_webhook_id_fkey";

alter table "public"."chat_messages" add constraint "chat_messages_role_check" CHECK (((role)::text = ANY ((ARRAY['user'::character varying, 'assistant'::character varying, 'system'::character varying])::text[]))) not valid;

alter table "public"."chat_messages" validate constraint "chat_messages_role_check";

alter table "public"."message_feedback" add constraint "message_feedback_feedback_type_check" CHECK (((feedback_type)::text = ANY ((ARRAY['like'::character varying, 'dislike'::character varying, 'comment'::character varying])::text[]))) not valid;

alter table "public"."message_feedback" validate constraint "message_feedback_feedback_type_check";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.cleanup_old_webhook_logs()
 RETURNS void
 LANGUAGE plpgsql
AS $function$
BEGIN
    DELETE FROM webhook_processing_log
    WHERE created_at < NOW() - INTERVAL '30 days';
END;
$function$
;

CREATE OR REPLACE FUNCTION public.ensure_event_id()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
    -- If event_id is null or empty string, generate a new unique one
    IF NEW.event_id IS NULL OR NEW.event_id = '' THEN
        NEW.event_id := public.generate_unique_event_id();
    END IF;
    RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.generate_unique_event_id()
 RETURNS text
 LANGUAGE plpgsql
AS $function$
DECLARE
    new_id text;
    done bool;
BEGIN
    done := false;
    WHILE NOT done LOOP
        -- Generate a unique ID with 'av-evt_' prefix and random string
        new_id := 'av-evt_' || encode(gen_random_bytes(12), 'hex');
        
        -- Check if this ID already exists
        done := NOT EXISTS (
            SELECT 1 
            FROM public.calendar_events 
            WHERE event_id = new_id
        );
    END LOOP;
    
    RETURN new_id;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.mark_expired_webhooks()
 RETURNS void
 LANGUAGE plpgsql
AS $function$
BEGIN
    UPDATE google_calendar_webhooks
    SET status = 'expired'
    WHERE expiration < NOW()
    AND status = 'active';
END;
$function$
;

CREATE OR REPLACE FUNCTION public.update_webhook_notification_stats()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
    UPDATE google_calendar_webhooks
    SET
        notification_count = notification_count + 1,
        last_notification = NOW()
    WHERE channel_id = NEW.channel_id;

    RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.update_updated_at_column()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$function$
;

grant delete on table "public"."google_calendar_webhooks" to "anon";

grant insert on table "public"."google_calendar_webhooks" to "anon";

grant references on table "public"."google_calendar_webhooks" to "anon";

grant select on table "public"."google_calendar_webhooks" to "anon";

grant trigger on table "public"."google_calendar_webhooks" to "anon";

grant truncate on table "public"."google_calendar_webhooks" to "anon";

grant update on table "public"."google_calendar_webhooks" to "anon";

grant delete on table "public"."google_calendar_webhooks" to "authenticated";

grant insert on table "public"."google_calendar_webhooks" to "authenticated";

grant references on table "public"."google_calendar_webhooks" to "authenticated";

grant select on table "public"."google_calendar_webhooks" to "authenticated";

grant trigger on table "public"."google_calendar_webhooks" to "authenticated";

grant truncate on table "public"."google_calendar_webhooks" to "authenticated";

grant update on table "public"."google_calendar_webhooks" to "authenticated";

grant delete on table "public"."google_calendar_webhooks" to "service_role";

grant insert on table "public"."google_calendar_webhooks" to "service_role";

grant references on table "public"."google_calendar_webhooks" to "service_role";

grant select on table "public"."google_calendar_webhooks" to "service_role";

grant trigger on table "public"."google_calendar_webhooks" to "service_role";

grant truncate on table "public"."google_calendar_webhooks" to "service_role";

grant update on table "public"."google_calendar_webhooks" to "service_role";

grant delete on table "public"."webhook_processing_log" to "anon";

grant insert on table "public"."webhook_processing_log" to "anon";

grant references on table "public"."webhook_processing_log" to "anon";

grant select on table "public"."webhook_processing_log" to "anon";

grant trigger on table "public"."webhook_processing_log" to "anon";

grant truncate on table "public"."webhook_processing_log" to "anon";

grant update on table "public"."webhook_processing_log" to "anon";

grant delete on table "public"."webhook_processing_log" to "authenticated";

grant insert on table "public"."webhook_processing_log" to "authenticated";

grant references on table "public"."webhook_processing_log" to "authenticated";

grant select on table "public"."webhook_processing_log" to "authenticated";

grant trigger on table "public"."webhook_processing_log" to "authenticated";

grant truncate on table "public"."webhook_processing_log" to "authenticated";

grant update on table "public"."webhook_processing_log" to "authenticated";

grant delete on table "public"."webhook_processing_log" to "service_role";

grant insert on table "public"."webhook_processing_log" to "service_role";

grant references on table "public"."webhook_processing_log" to "service_role";

grant select on table "public"."webhook_processing_log" to "service_role";

grant trigger on table "public"."webhook_processing_log" to "service_role";

grant truncate on table "public"."webhook_processing_log" to "service_role";

grant update on table "public"."webhook_processing_log" to "service_role";

create policy "Admins can manage org events"
on "public"."calendar_events"
as permissive
for all
to authenticated
using (((org IS NOT NULL) AND ( SELECT authorize_role(calendar_events.org) AS authorize_role)))
with check (((org IS NOT NULL) AND ( SELECT authorize_role(calendar_events.org) AS authorize_role)));


create policy "All"
on "public"."calendar_events"
as permissive
for all
to authenticated
using (true);


create policy "Users can manage their own events"
on "public"."calendar_events"
as permissive
for all
to authenticated
using (((profile IS NOT NULL) AND (profile = auth.uid())))
with check (((profile IS NOT NULL) AND (profile = auth.uid())));


create policy "Users can view relevant events"
on "public"."calendar_events"
as permissive
for select
to authenticated
using ((((profile IS NOT NULL) AND (profile = auth.uid())) OR ((org IS NOT NULL) AND ( SELECT authorize_role(calendar_events.org) AS authorize_role))));


create policy "Admins can manage org webhooks"
on "public"."google_calendar_webhooks"
as permissive
for all
to authenticated
using (((org IS NOT NULL) AND (EXISTS ( SELECT 1
   FROM profiles_roles
  WHERE ((profiles_roles.organisation = google_calendar_webhooks.org) AND (profiles_roles.profile = auth.uid()) AND (profiles_roles.role = 'admin'::app_role__old_version_to_be_dropped))))));


create policy "Users can manage their own webhooks"
on "public"."google_calendar_webhooks"
as permissive
for all
to authenticated
using ((profile = auth.uid()));


create policy "Admins can view org webhook logs"
on "public"."webhook_processing_log"
as permissive
for select
to authenticated
using ((EXISTS ( SELECT 1
   FROM google_calendar_webhooks
  WHERE ((google_calendar_webhooks.channel_id = webhook_processing_log.channel_id) AND (((google_calendar_webhooks.org IS NOT NULL) AND (EXISTS ( SELECT 1
           FROM profiles_roles
          WHERE ((profiles_roles.organisation = google_calendar_webhooks.org) AND (profiles_roles.profile = auth.uid()) AND (profiles_roles.role = 'admin'::app_role__old_version_to_be_dropped))))) OR (google_calendar_webhooks.profile = auth.uid()))))));


create policy "Service role can insert webhook logs"
on "public"."webhook_processing_log"
as permissive
for insert
to service_role
with check (true);


create policy "Only admins can perform actions on org calendar"
on "public"."calendars"
as permissive
for all
to authenticated
using (
CASE
    WHEN (org IS NOT NULL) THEN ( SELECT authorize_role(calendars.org) AS authorize_role)
    ELSE (profile = auth.uid())
END);


CREATE TRIGGER ensure_event_id_trigger BEFORE INSERT ON public.calendar_events FOR EACH ROW EXECUTE FUNCTION ensure_event_id();

CREATE TRIGGER update_google_calendar_webhooks_updated_at BEFORE UPDATE ON public.google_calendar_webhooks FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_webhook_stats_on_log_insert AFTER INSERT ON public.webhook_processing_log FOR EACH ROW EXECUTE FUNCTION update_webhook_notification_stats();


