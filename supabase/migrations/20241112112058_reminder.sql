drop trigger if exists "messages_hook" on "public"."inbox";

drop trigger if exists "email_notifications" on "public"."notifications";

drop policy "Enable insert for org's ad users only" on "public"."notifications";

create table "public"."reminders" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "title" text not null,
    "description" text,
    "datetime" timestamp with time zone not null,
    "org" text not null,
    "contract" bigint not null,
    "type" text,
    "profile" uuid
);


alter table "public"."reminders" enable row level security;

alter table "public"."notifications" add column "schedule_at" timestamp with time zone;

alter table "public"."open_roles" add column "compensation_public" boolean not null default false;

CREATE UNIQUE INDEX reminders_pkey ON public.reminders USING btree (id);

alter table "public"."reminders" add constraint "reminders_pkey" PRIMARY KEY using index "reminders_pkey";

alter table "public"."reminders" add constraint "reminders_contract_fkey" FOREIGN KEY (contract) REFERENCES contracts(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."reminders" validate constraint "reminders_contract_fkey";

alter table "public"."reminders" add constraint "reminders_org_fkey" FOREIGN KEY (org) REFERENCES organisations(subdomain) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."reminders" validate constraint "reminders_org_fkey";

alter table "public"."reminders" add constraint "reminders_profile_fkey" FOREIGN KEY (profile) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."reminders" validate constraint "reminders_profile_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.reminder_insert_notification()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
    INSERT INTO public.notifications (body, "for", org, title, sender_profile, sender_contract, link, schedule_at)
    VALUES ('This is to notify you about your remainder. Requested a reminder about ' || NEW.title, 
            'employee',
            NEW.org,
            'Reminder | ' || NEW.title,
            NEW.profile,
            NEW.contract,
            '/',
            NEW.datetime);
    RETURN NEW;
END;$function$
;

grant delete on table "public"."reminders" to "anon";

grant insert on table "public"."reminders" to "anon";

grant references on table "public"."reminders" to "anon";

grant select on table "public"."reminders" to "anon";

grant trigger on table "public"."reminders" to "anon";

grant truncate on table "public"."reminders" to "anon";

grant update on table "public"."reminders" to "anon";

grant delete on table "public"."reminders" to "authenticated";

grant insert on table "public"."reminders" to "authenticated";

grant references on table "public"."reminders" to "authenticated";

grant select on table "public"."reminders" to "authenticated";

grant trigger on table "public"."reminders" to "authenticated";

grant truncate on table "public"."reminders" to "authenticated";

grant update on table "public"."reminders" to "authenticated";

grant delete on table "public"."reminders" to "service_role";

grant insert on table "public"."reminders" to "service_role";

grant references on table "public"."reminders" to "service_role";

grant select on table "public"."reminders" to "service_role";

grant trigger on table "public"."reminders" to "service_role";

grant truncate on table "public"."reminders" to "service_role";

grant update on table "public"."reminders" to "service_role";

create policy "Enable users to update their own data only"
on "public"."reminders"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = profile));


create policy "Enable users to view their own data only"
on "public"."reminders"
as permissive
for select
to authenticated
using (((( SELECT auth.uid() AS uid) = profile) AND ( SELECT ((auth.jwt() ->> 'user_role_org'::text) = reminders.org))));


create policy "Only allow authenticated users to insert"
on "public"."reminders"
as permissive
for insert
to authenticated
with check (true);


create policy "Only reminder owner can create a reminder"
on "public"."reminders"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) = profile));


create policy "Enable insert for org's ad users only"
on "public"."notifications"
as permissive
for insert
to authenticated
with check (( SELECT authorize_role(notifications.org) AS authorize_role));


CREATE TRIGGER reminder_notification_insert AFTER INSERT ON public.reminders FOR EACH ROW EXECUTE FUNCTION reminder_insert_notification();


