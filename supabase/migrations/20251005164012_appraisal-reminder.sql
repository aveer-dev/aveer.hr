create type "public"."appraisal_email_type" as enum ('appraisal_start_reminder_admin', 'appraisal_start_reminder_all', 'self_review_reminder_day_before', 'self_review_reminder_day_of', 'manager_review_reminder_day_before', 'manager_review_reminder_day_of', 'appraisal_end_reminder_admin');

create type "public"."appraisal_frequency" as enum ('monthly', 'bi-monthly', 'quarterly', 'bi-annually', 'annually');

create type "public"."email_status" as enum ('pending', 'scheduled', 'sent', 'failed', 'cancelled');

create type "public"."recipient_type" as enum ('admin', 'employee', 'manager');

alter table "public"."chat_messages" drop constraint "chat_messages_role_check";

alter table "public"."message_feedback" drop constraint "message_feedback_feedback_type_check";

create table "public"."appraisal_email_notifications" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "org" text not null,
    "appraisal_cycle" bigint not null,
    "contract" bigint,
    "notification_config" jsonb not null,
    "is_active" boolean not null default true,
    "last_processed_at" timestamp with time zone
);


alter table "public"."appraisal_email_notifications" enable row level security;

create table "public"."appraisal_scheduled_emails" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "org" text not null,
    "appraisal_cycle" bigint not null,
    "contract" bigint,
    "email_type" appraisal_email_type not null,
    "recipient_type" recipient_type not null,
    "scheduled_for" timestamp with time zone not null,
    "status" email_status not null default 'pending'::email_status,
    "resend_email_id" text,
    "email_data" jsonb not null,
    "error_message" text,
    "retry_count" integer default 0,
    "max_retries" integer default 3,
    "processed_at" timestamp with time zone
);


alter table "public"."appraisal_scheduled_emails" enable row level security;

CREATE UNIQUE INDEX appraisal_email_notifications_pkey ON public.appraisal_email_notifications USING btree (id);

CREATE UNIQUE INDEX appraisal_scheduled_emails_pkey ON public.appraisal_scheduled_emails USING btree (id);

CREATE INDEX idx_appraisal_email_notifications_appraisal_cycle_id ON public.appraisal_email_notifications USING btree (appraisal_cycle);

CREATE INDEX idx_appraisal_email_notifications_org ON public.appraisal_email_notifications USING btree (org);

CREATE INDEX idx_appraisal_scheduled_emails_appraisal_cycle_id ON public.appraisal_scheduled_emails USING btree (appraisal_cycle);

CREATE INDEX idx_appraisal_scheduled_emails_org ON public.appraisal_scheduled_emails USING btree (org);

CREATE INDEX idx_appraisal_scheduled_emails_status_scheduled_for ON public.appraisal_scheduled_emails USING btree (status, scheduled_for);

alter table "public"."appraisal_email_notifications" add constraint "appraisal_email_notifications_pkey" PRIMARY KEY using index "appraisal_email_notifications_pkey";

alter table "public"."appraisal_scheduled_emails" add constraint "appraisal_scheduled_emails_pkey" PRIMARY KEY using index "appraisal_scheduled_emails_pkey";

alter table "public"."appraisal_email_notifications" add constraint "appraisal_email_notifications_appraisal_cycle_fkey" FOREIGN KEY (appraisal_cycle) REFERENCES appraisal_cycles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."appraisal_email_notifications" validate constraint "appraisal_email_notifications_appraisal_cycle_fkey";

alter table "public"."appraisal_email_notifications" add constraint "appraisal_email_notifications_contract_fkey" FOREIGN KEY (contract) REFERENCES contracts(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."appraisal_email_notifications" validate constraint "appraisal_email_notifications_contract_fkey";

alter table "public"."appraisal_scheduled_emails" add constraint "appraisal_scheduled_emails_appraisal_cycle_fkey" FOREIGN KEY (appraisal_cycle) REFERENCES appraisal_cycles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."appraisal_scheduled_emails" validate constraint "appraisal_scheduled_emails_appraisal_cycle_fkey";

alter table "public"."appraisal_scheduled_emails" add constraint "appraisal_scheduled_emails_contract_fkey" FOREIGN KEY (contract) REFERENCES contracts(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."appraisal_scheduled_emails" validate constraint "appraisal_scheduled_emails_contract_fkey";

alter table "public"."chat_messages" add constraint "chat_messages_role_check" CHECK (((role)::text = ANY ((ARRAY['user'::character varying, 'assistant'::character varying, 'system'::character varying])::text[]))) not valid;

alter table "public"."chat_messages" validate constraint "chat_messages_role_check";

alter table "public"."message_feedback" add constraint "message_feedback_feedback_type_check" CHECK (((feedback_type)::text = ANY ((ARRAY['like'::character varying, 'dislike'::character varying, 'comment'::character varying])::text[]))) not valid;

alter table "public"."message_feedback" validate constraint "message_feedback_feedback_type_check";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_appraisal_cycle_update()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
  -- Update scheduled emails when appraisal cycle dates change
  IF OLD.start_date != NEW.start_date OR OLD.end_date != NEW.end_date OR
     OLD.self_review_due_date != NEW.self_review_due_date OR
     OLD.manager_review_due_date != NEW.manager_review_due_date THEN

    -- Mark all pending emails for this cycle as cancelled
    UPDATE "public"."appraisal_scheduled_emails"
    SET status = 'cancelled', updated_at = now()
    WHERE appraisal_cycle = NEW.id
      AND status IN ('pending', 'scheduled');

    -- Insert a notification record to trigger rescheduling
    INSERT INTO "public"."appraisal_email_notifications" (
      org, appraisal_cycle, contract, notification_config, is_active
    ) VALUES (
      NEW.org,
      NEW.id,
      NEW.employee,
      jsonb_build_object(
        'action', 'reschedule',
        'old_dates', jsonb_build_object(
          'start_date', OLD.start_date,
          'end_date', OLD.end_date,
          'self_review_due_date', OLD.self_review_due_date,
          'manager_review_due_date', OLD.manager_review_due_date
        ),
        'new_dates', jsonb_build_object(
          'start_date', NEW.start_date,
          'end_date', NEW.end_date,
          'self_review_due_date', NEW.self_review_due_date,
          'manager_review_due_date', NEW.manager_review_due_date
        )
      ),
      true
    );
  END IF;

  RETURN NEW;
END;$function$
;

CREATE OR REPLACE FUNCTION public.trigger_appraisal_email_processor()
 RETURNS void
 LANGUAGE plpgsql
AS $function$
BEGIN
  -- Call the edge function to process emails
  PERFORM net.http_post(
    url := 'https://byprsbkeackkgjsjlcgp.supabase.co/functions/v1/appraisal_email_processor',
    headers := '{"Content-Type": "application/json"}'::jsonb,
    body := '{}'::jsonb
  );
END;
$function$
;

CREATE OR REPLACE FUNCTION public.update_updated_at_column()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$function$
;

grant delete on table "public"."appraisal_email_notifications" to "anon";

grant insert on table "public"."appraisal_email_notifications" to "anon";

grant references on table "public"."appraisal_email_notifications" to "anon";

grant select on table "public"."appraisal_email_notifications" to "anon";

grant trigger on table "public"."appraisal_email_notifications" to "anon";

grant truncate on table "public"."appraisal_email_notifications" to "anon";

grant update on table "public"."appraisal_email_notifications" to "anon";

grant delete on table "public"."appraisal_email_notifications" to "authenticated";

grant insert on table "public"."appraisal_email_notifications" to "authenticated";

grant references on table "public"."appraisal_email_notifications" to "authenticated";

grant select on table "public"."appraisal_email_notifications" to "authenticated";

grant trigger on table "public"."appraisal_email_notifications" to "authenticated";

grant truncate on table "public"."appraisal_email_notifications" to "authenticated";

grant update on table "public"."appraisal_email_notifications" to "authenticated";

grant delete on table "public"."appraisal_email_notifications" to "service_role";

grant insert on table "public"."appraisal_email_notifications" to "service_role";

grant references on table "public"."appraisal_email_notifications" to "service_role";

grant select on table "public"."appraisal_email_notifications" to "service_role";

grant trigger on table "public"."appraisal_email_notifications" to "service_role";

grant truncate on table "public"."appraisal_email_notifications" to "service_role";

grant update on table "public"."appraisal_email_notifications" to "service_role";

grant delete on table "public"."appraisal_scheduled_emails" to "anon";

grant insert on table "public"."appraisal_scheduled_emails" to "anon";

grant references on table "public"."appraisal_scheduled_emails" to "anon";

grant select on table "public"."appraisal_scheduled_emails" to "anon";

grant trigger on table "public"."appraisal_scheduled_emails" to "anon";

grant truncate on table "public"."appraisal_scheduled_emails" to "anon";

grant update on table "public"."appraisal_scheduled_emails" to "anon";

grant delete on table "public"."appraisal_scheduled_emails" to "authenticated";

grant insert on table "public"."appraisal_scheduled_emails" to "authenticated";

grant references on table "public"."appraisal_scheduled_emails" to "authenticated";

grant select on table "public"."appraisal_scheduled_emails" to "authenticated";

grant trigger on table "public"."appraisal_scheduled_emails" to "authenticated";

grant truncate on table "public"."appraisal_scheduled_emails" to "authenticated";

grant update on table "public"."appraisal_scheduled_emails" to "authenticated";

grant delete on table "public"."appraisal_scheduled_emails" to "service_role";

grant insert on table "public"."appraisal_scheduled_emails" to "service_role";

grant references on table "public"."appraisal_scheduled_emails" to "service_role";

grant select on table "public"."appraisal_scheduled_emails" to "service_role";

grant trigger on table "public"."appraisal_scheduled_emails" to "service_role";

grant truncate on table "public"."appraisal_scheduled_emails" to "service_role";

grant update on table "public"."appraisal_scheduled_emails" to "service_role";

create policy "Enable delete for org members"
on "public"."appraisal_email_notifications"
as permissive
for delete
to public
using (true);


create policy "Enable insert for org members"
on "public"."appraisal_email_notifications"
as permissive
for insert
to public
with check (true);


create policy "Enable read access for org members"
on "public"."appraisal_email_notifications"
as permissive
for select
to public
using (true);


create policy "Enable update for org members"
on "public"."appraisal_email_notifications"
as permissive
for update
to public
using (true);


create policy "Enable delete for org members"
on "public"."appraisal_scheduled_emails"
as permissive
for delete
to public
using (true);


create policy "Enable insert for org members"
on "public"."appraisal_scheduled_emails"
as permissive
for insert
to public
with check (true);


create policy "Enable read access for org members"
on "public"."appraisal_scheduled_emails"
as permissive
for select
to public
using (true);


create policy "Enable update for org members"
on "public"."appraisal_scheduled_emails"
as permissive
for update
to public
using (true);


CREATE TRIGGER appraisal_cycle_update_trigger AFTER UPDATE ON public.appraisal_cycles FOR EACH ROW EXECUTE FUNCTION handle_appraisal_cycle_update();

CREATE TRIGGER update_appraisal_email_notifications_updated_at BEFORE UPDATE ON public.appraisal_email_notifications FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_appraisal_scheduled_emails_updated_at BEFORE UPDATE ON public.appraisal_scheduled_emails FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();


