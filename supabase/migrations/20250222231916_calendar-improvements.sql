create type "public"."calendar_platform" as enum ('google');

drop policy "Org members can select contract" on "public"."contracts";

create table "public"."calendar_platform_tokens" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "token" text not null,
    "refresh_token" text not null,
    "org" text not null,
    "entity" bigint,
    "platform" calendar_platform
);


alter table "public"."calendar_platform_tokens" enable row level security;

alter table "public"."calendar_events" add column "calendar_id" text;

alter table "public"."calendar_events" add column "reminders" jsonb[] default '{}'::jsonb[];

alter table "public"."calendar_events" alter column "event_id" drop not null;

alter table "public"."org_settings" drop column "enable_calendar";

alter table "public"."org_settings" add column "enable_thirdparty_calendar" boolean not null default false;

CREATE UNIQUE INDEX calendar_platform_tokens_org_key ON public.calendar_platform_tokens USING btree (org);

CREATE UNIQUE INDEX calendar_platform_tokens_pkey ON public.calendar_platform_tokens USING btree (id);

CREATE UNIQUE INDEX calendars_calendar_id_key ON public.calendars USING btree (calendar_id);

alter table "public"."calendar_platform_tokens" add constraint "calendar_platform_tokens_pkey" PRIMARY KEY using index "calendar_platform_tokens_pkey";

alter table "public"."calendar_events" add constraint "calendar_events_calendar_id_fkey" FOREIGN KEY (calendar_id) REFERENCES calendars(calendar_id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."calendar_events" validate constraint "calendar_events_calendar_id_fkey";

alter table "public"."calendar_platform_tokens" add constraint "calendar_platform_tokens_entity_fkey" FOREIGN KEY (entity) REFERENCES legal_entities(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."calendar_platform_tokens" validate constraint "calendar_platform_tokens_entity_fkey";

alter table "public"."calendar_platform_tokens" add constraint "calendar_platform_tokens_org_fkey" FOREIGN KEY (org) REFERENCES organisations(subdomain) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."calendar_platform_tokens" validate constraint "calendar_platform_tokens_org_fkey";

alter table "public"."calendar_platform_tokens" add constraint "calendar_platform_tokens_org_key" UNIQUE using index "calendar_platform_tokens_org_key";

alter table "public"."calendars" add constraint "calendars_calendar_id_key" UNIQUE using index "calendars_calendar_id_key";

grant delete on table "public"."calendar_platform_tokens" to "anon";

grant insert on table "public"."calendar_platform_tokens" to "anon";

grant references on table "public"."calendar_platform_tokens" to "anon";

grant select on table "public"."calendar_platform_tokens" to "anon";

grant trigger on table "public"."calendar_platform_tokens" to "anon";

grant truncate on table "public"."calendar_platform_tokens" to "anon";

grant update on table "public"."calendar_platform_tokens" to "anon";

grant delete on table "public"."calendar_platform_tokens" to "authenticated";

grant insert on table "public"."calendar_platform_tokens" to "authenticated";

grant references on table "public"."calendar_platform_tokens" to "authenticated";

grant select on table "public"."calendar_platform_tokens" to "authenticated";

grant trigger on table "public"."calendar_platform_tokens" to "authenticated";

grant truncate on table "public"."calendar_platform_tokens" to "authenticated";

grant update on table "public"."calendar_platform_tokens" to "authenticated";

grant delete on table "public"."calendar_platform_tokens" to "service_role";

grant insert on table "public"."calendar_platform_tokens" to "service_role";

grant references on table "public"."calendar_platform_tokens" to "service_role";

grant select on table "public"."calendar_platform_tokens" to "service_role";

grant trigger on table "public"."calendar_platform_tokens" to "service_role";

grant truncate on table "public"."calendar_platform_tokens" to "service_role";

grant update on table "public"."calendar_platform_tokens" to "service_role";

create policy "Only admins can use calendar tokens"
on "public"."calendar_platform_tokens"
as permissive
for all
to authenticated
using (true)
with check (( SELECT authorize_role(calendar_platform_tokens.org) AS authorize_role));


create policy "Org members can select contract"
on "public"."contracts"
as permissive
for select
to authenticated
using (( SELECT ((auth.jwt() ->> 'user_role_org'::text) = contracts.org)));



