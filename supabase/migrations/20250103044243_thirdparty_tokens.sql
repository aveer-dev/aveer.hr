create type "public"."third_party_auth_platforms" as enum ('google');
create table "public"."third_party_tokens" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "token" text not null,
    "refresh_token" text,
    "platform" third_party_auth_platforms not null,
    "profile" uuid not null default auth.uid()
);
alter table "public"."third_party_tokens" enable row level security;
CREATE UNIQUE INDEX third_party_tokens_pkey ON public.third_party_tokens USING btree (id);
alter table "public"."third_party_tokens" add constraint "third_party_tokens_pkey" PRIMARY KEY using index "third_party_tokens_pkey";
alter table "public"."third_party_tokens" add constraint "third_party_tokens_profile_fkey" FOREIGN KEY (profile) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;
alter table "public"."third_party_tokens" validate constraint "third_party_tokens_profile_fkey";
grant delete on table "public"."third_party_tokens" to "anon";
grant insert on table "public"."third_party_tokens" to "anon";
grant references on table "public"."third_party_tokens" to "anon";
grant select on table "public"."third_party_tokens" to "anon";
grant trigger on table "public"."third_party_tokens" to "anon";
grant truncate on table "public"."third_party_tokens" to "anon";
grant update on table "public"."third_party_tokens" to "anon";
grant delete on table "public"."third_party_tokens" to "authenticated";
grant insert on table "public"."third_party_tokens" to "authenticated";
grant references on table "public"."third_party_tokens" to "authenticated";
grant select on table "public"."third_party_tokens" to "authenticated";
grant trigger on table "public"."third_party_tokens" to "authenticated";
grant truncate on table "public"."third_party_tokens" to "authenticated";
grant update on table "public"."third_party_tokens" to "authenticated";
grant delete on table "public"."third_party_tokens" to "service_role";
grant insert on table "public"."third_party_tokens" to "service_role";
grant references on table "public"."third_party_tokens" to "service_role";
grant select on table "public"."third_party_tokens" to "service_role";
grant trigger on table "public"."third_party_tokens" to "service_role";
grant truncate on table "public"."third_party_tokens" to "service_role";
grant update on table "public"."third_party_tokens" to "service_role";
create policy "Enable delete for users based on user_id"
on "public"."third_party_tokens"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = profile));
create policy "Enable insert for authenticated users only"
on "public"."third_party_tokens"
as permissive
for insert
to authenticated
with check (true);
create policy "Enable update for users based on email"
on "public"."third_party_tokens"
as permissive
for update
to public
using ((auth.uid() = profile))
with check ((auth.uid() = profile));
create policy "Enable users to view their own data only"
on "public"."third_party_tokens"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = profile));
